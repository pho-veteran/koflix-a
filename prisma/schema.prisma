// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
  UPLOADER
}

model User {
  id           String         @id @map("_id")
  emailOrPhone String?        @unique
  name         String?
  avatarUrl    String?
  role         UserRole       @default(CUSTOMER)
  likedMovies  String[]       @db.ObjectId
  watchHistory WatchHistory[]
  comments     Comment[]
  replies      Reply[]
  preferences  String[]
  interactions UserInteraction[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model MovieType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String   @unique
  movies    Movie[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String   @unique
  movies    Movie[]  @relation(fields: [movieIds], references: [id])
  movieIds  String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String   @unique
  movies    Movie[]  @relation(fields: [movieIds], references: [id])
  movieIds  String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movie {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String    @unique
  origin_name     String
  type            MovieType @relation(fields: [typeId], references: [id])
  typeId          String    @db.ObjectId
  genres          Genre[]   @relation(fields: [genreIds], references: [id])
  genreIds        String[]  @db.ObjectId
  countries       Country[] @relation(fields: [countryIds], references: [id])
  countryIds      String[]  @db.ObjectId
  year            Int
  time            String
  poster_url      String
  thumb_url       String
  trailer_url     String?
  quality         String?
  lang            String?
  sub_docquyen    Boolean   @default(false)
  episode_current String?
  episode_total   String?
  status          String?
  is_copyright    Boolean   @default(false)
  chieurap        Boolean   @default(false)

  tmdb_id      String?
  tmdb_type    String?
  tmdb_season  Int?
  vote_average Float?
  vote_count   Int?

  imdb_id String?

  actor    String[] @default([])
  director String[] @default([])

  content String

  notify    String?
  showtimes String?

  episodes   Episode[]
  interactions UserInteraction[]

  view         Int   @default(0)
  rating       Float @default(0)
  ratingCount  Int?  @default(0)
  likeCount    Int   @default(0)
  dislikeCount Int   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  WatchHistory WatchHistory[]
  Comment      Comment[]

  is_imported Boolean @default(true)

  @@index([name, year])
}

model Episode {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String
  movie         Movie           @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId       String          @db.ObjectId
  servers       EpisodeServer[]
  createdAt     DateTime        @default(now())
  Comment       Comment[]

  @@unique([movieId, slug])
}

model WatchHistory {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  movie           Movie         @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId         String        @db.ObjectId
  episodeServer   EpisodeServer @relation(fields: [episodeServerId], references: [id], onDelete: Cascade)
  episodeServerId String        @db.ObjectId
  progress        Float         @default(0)
  durationWatched Int           @default(0)
  watchedAt       DateTime      @default(now()) @map("watchedAt")

  @@unique([userId, movieId, episodeServerId])
  @@index([userId, watchedAt])
  @@index([movieId])
  @@index([episodeServerId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId    String
  movie     Movie?   @relation(fields: [movieId], references: [id], onDelete: Cascade) 
  movieId   String?  @db.ObjectId 
  episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId String?  @db.ObjectId 

  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  replies   Reply[] 

  @@index([movieId])
  @@index([episodeId])
  @@index([userId])
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade) 
  commentId String   @db.ObjectId 

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  @@index([commentId])
  @@index([userId])
}

model EpisodeServer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  server_name String
  episode     Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId   String   @db.ObjectId
  filename    String?
  link_embed  String?
  link_m3u8   String?
  link_mp4    String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  WatchHistory WatchHistory[]

  @@index([episodeId])
}

enum InteractionType {
  VIEW
  LIKE
  DISLIKE
  RATE
}

model UserInteraction {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String          
  movie           Movie           @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId         String          @db.ObjectId
  interactionType InteractionType
  rating          Int?
  timestamp       DateTime        @default(now())

  @@index([userId, movieId, interactionType])
  @@index([movieId, interactionType])
}
